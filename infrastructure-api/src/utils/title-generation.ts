const SCOTLAND_COUNCILS = [
    'aberdeen_city',
    'aberdeenshire',
    'angus',
    'argyll_and_bute',
    'city_of_edinburgh',
    'clackmannanshire',
    'dumfries_and_galloway',
    'dundee_city',
    'east_ayrshire',
    'east_dunbartonshire',
    'east_lothian',
    'east_renfrewshire',
    'falkirk',
    'fife',
    'glasgow_city',
    'highland',
    'inverclyde',
    'midlothian',
    'moray',
    'na_h_eileanan_siar',
    'north_ayrshire',
    'north_lanarkshire',
    'orkney_islands',
    'perth_and_kinross',
    'renfrewshire',
    'scottish_borders',
    'shetland_islands',
    'south_ayrshire',
    'south_lanarkshire',
    'stirling',
    'west_dunbartonshire',
    'west_lothian',
];
const ENGLAND_COUNCILS = [
    'adur',
    'allerdale',
    'amber_valley',
    'arun',
    'ashfield',
    'ashford',
    'babergh',
    'barking_and_dagenham',
    'barnet',
    'barnsley',
    'barrow_in_furness',
    'basildon',
    'basingstoke_and_deane',
    'bassetlaw',
    'bath_and_north_east_somerset',
    'bedford',
    'bexley',
    'birmingham',
    'blaby',
    'blackburn_with_darwen',
    'blackpool',
    'blaenau_gwent',
    'bolsover',
    'bolton',
    'boston',
    'bournemouth,_christchurch_and_poole',
    'bracknell_forest',
    'bradford',
    'braintree',
    'breckland',
    'brent',
    'brentwood',
    'bridgend',
    'brighton_and_hove',
    'bristol,_city_of',
    'broadland',
    'bromley',
    'bromsgrove',
    'broxbourne',
    'broxtowe',
    'buckinghamshire',
    'burnley',
    'bury',
    'caerphilly',
    'calderdale',
    'cambridge',
    'camden',
    'cannock_chase',
    'canterbury',
    'cardiff',
    'carlisle',
    'carmarthenshire',
    'castle_point',
    'central_bedfordshire',
    'ceredigion',
    'charnwood',
    'chelmsford',
    'cheltenham',
    'cherwell',
    'cheshire_east',
    'cheshire_west_and_chester',
    'chesterfield',
    'chichester',
    'chorley',
    'city_of_london',
    'colchester',
    'conwy',
    'copeland',
    'corby',
    'cornwall',
    'cotswold',
    'county_durham',
    'coventry',
    'craven',
    'crawley',
    'croydon',
    'dacorum',
    'darlington',
    'dartford',
    'daventry',
    'denbighshire',
    'derby',
    'derbyshire_dales',
    'doncaster',
    'dorset',
    'dover',
    'dudley',
    'ealing',
    'east_cambridgeshire',
    'east_devon',
    'east_hampshire',
    'east_hertfordshire',
    'east_lindsey',
    'east_northamptonshire',
    'east_riding_of_yorkshire',
    'east_staffordshire',
    'east_suffolk',
    'eastbourne',
    'eastleigh',
    'eden',
    'elmbridge',
    'enfield',
    'epping_forest',
    'epsom_and_ewell',
    'erewash',
    'exeter',
    'fareham',
    'fenland',
    'flintshire',
    'folkestone_and_hythe',
    'forest_of_dean',
    'fylde',
    'gateshead',
    'gedling',
    'gloucester',
    'gosport',
    'gravesham',
    'great_yarmouth',
    'greenwich',
    'guildford',
    'gwynedd',
    'hackney',
    'halton',
    'hambleton',
    'hammersmith_and_fulham',
    'harborough',
    'haringey',
    'harlow',
    'harrogate',
    'harrow',
    'hart',
    'hartlepool',
    'hastings',
    'havant',
    'havering',
    'herefordshire,_county_of',
    'hertsmere',
    'high_peak',
    'hillingdon',
    'hinckley_and_bosworth',
    'horsham',
    'hounslow',
    'huntingdonshire',
    'hyndburn',
    'ipswich',
    'isle_of_anglesey',
    'isle_of_wight',
    'isles_of_scilly',
    'islington',
    'kensington_and_chelsea',
    'kettering',
    "king's_lynn_and_west_norfolk",
    'kingston_upon_hull,_city_of',
    'kingston_upon_thames',
    'kirklees',
    'knowsley',
    'lambeth',
    'lancaster',
    'leeds',
    'leicester',
    'lewes',
    'lewisham',
    'lichfield',
    'lincoln',
    'liverpool',
    'luton',
    'maidstone',
    'maldon',
    'malvern_hills',
    'manchester',
    'mansfield',
    'medway',
    'melton',
    'mendip',
    'merthyr_tydfil',
    'merton',
    'mid_devon',
    'mid_suffolk',
    'mid_sussex',
    'middlesbrough',
    'milton_keynes',
    'mole_valley',
    'monmouthshire',
    'neath_port_talbot',
    'new_forest',
    'newark_and_sherwood',
    'newcastle_under_lyme',
    'newcastle_upon_tyne',
    'newham',
    'newport',
    'north_devon',
    'north_east_derbyshire',
    'north_east_lincolnshire',
    'north_hertfordshire',
    'north_kesteven',
    'north_lincolnshire',
    'north_norfolk',
    'north_somerset',
    'north_tyneside',
    'north_warwickshire',
    'north_west_leicestershire',
    'northampton',
    'northumberland',
    'norwich',
    'nottingham',
    'nuneaton_and_bedworth',
    'oadby_and_wigston',
    'oldham',
    'oxford',
    'pembrokeshire',
    'pendle',
    'peterborough',
    'plymouth',
    'portsmouth',
    'powys',
    'preston',
    'reading',
    'redbridge',
    'redcar_and_cleveland',
    'redditch',
    'reigate_and_banstead',
    'rhondda_cynon_taf',
    'ribble_valley',
    'richmond_upon_thames',
    'richmondshire',
    'rochdale',
    'rochford',
    'rossendale',
    'rother',
    'rotherham',
    'rugby',
    'runnymede',
    'rushcliffe',
    'rushmoor',
    'rutland',
    'ryedale',
    'salford',
    'sandwell',
    'scarborough',
    'sedgemoor',
    'sefton',
    'selby',
    'sevenoaks',
    'sheffield',
    'shropshire',
    'slough',
    'solihull',
    'somerset_west_and_taunton',
    'south_cambridgeshire',
    'south_derbyshire',
    'south_gloucestershire',
    'south_hams',
    'south_holland',
    'south_kesteven',
    'south_lakeland',
    'south_norfolk',
    'south_northamptonshire',
    'south_oxfordshire',
    'south_ribble',
    'south_somerset',
    'south_staffordshire',
    'south_tyneside',
    'southampton',
    'southend_on_sea',
    'southwark',
    'spelthorne',
    'st._helens',
    'st_albans',
    'stafford',
    'staffordshire_moorlands',
    'stevenage',
    'stockport',
    'stockton_on_tees',
    'stoke_on_trent',
    'stratford_on_avon',
    'stroud',
    'sunderland',
    'surrey_heath',
    'sutton',
    'swale',
    'swansea',
    'swindon',
    'tameside',
    'tamworth',
    'tandridge',
    'teignbridge',
    'telford_and_wrekin',
    'tendring',
    'test_valley',
    'tewkesbury',
    'thanet',
    'three_rivers',
    'thurrock',
    'tonbridge_and_malling',
    'torbay',
    'torfaen',
    'torridge',
    'tower_hamlets',
    'trafford',
    'tunbridge_wells',
    'uttlesford',
    'vale_of_glamorgan',
    'vale_of_white_horse',
    'wakefield',
    'walsall',
    'waltham_forest',
    'wandsworth',
    'warrington',
    'warwick',
    'watford',
    'waverley',
    'wealden',
    'wellingborough',
    'welwyn_hatfield',
    'west_berkshire',
    'west_devon',
    'west_lancashire',
    'west_lindsey',
    'west_oxfordshire',
    'west_suffolk',
    'westminster',
    'wigan',
    'wiltshire',
    'winchester',
    'windsor_and_maidenhead',
    'wirral',
    'woking',
    'wokingham',
    'wolverhampton',
    'worcester',
    'worthing',
    'wrexham',
    'wychavon',
    'wyre',
    'wyre_forest',
    'york',
];
const LTLA_NAMES = [
    'e06000001',
    'e06000002',
    'e06000003',
    'e06000004',
    'e06000005',
    'e06000006',
    'e06000007',
    'e06000008',
    'e06000009',
    'e06000010',
    'e06000011',
    'e06000012',
    'e06000013',
    'e06000014',
    'e06000015',
    'e06000016',
    'e06000017',
    'e06000018',
    'e06000019',
    'e06000020',
    'e06000021',
    'e06000022',
    'e06000023',
    'e06000024',
    'e06000025',
    'e06000026',
    'e06000027',
    'e06000030',
    'e06000031',
    'e06000032',
    'e06000033',
    'e06000034',
    'e06000035',
    'e06000036',
    'e06000037',
    'e06000038',
    'e06000039',
    'e06000040',
    'e06000041',
    'e06000042',
    'e06000043',
    'e06000044',
    'e06000045',
    'e06000046',
    'e06000047',
    'e06000049',
    'e06000050',
    'e06000051',
    'e06000052',
    'e06000054',
    'e06000055',
    'e06000056',
    'e06000057',
    'e06000058',
    'e06000059',
    'e07000008',
    'e07000009',
    'e07000010',
    'e07000011',
    'e07000012',
    'e07000026',
    'e07000027',
    'e07000028',
    'e07000029',
    'e07000030',
    'e07000031',
    'e07000032',
    'e07000033',
    'e07000034',
    'e07000035',
    'e07000036',
    'e07000037',
    'e07000038',
    'e07000039',
    'e07000040',
    'e07000041',
    'e07000042',
    'e07000043',
    'e07000044',
    'e07000045',
    'e07000046',
    'e07000047',
    'e07000061',
    'e07000062',
    'e07000063',
    'e07000064',
    'e07000065',
    'e07000066',
    'e07000067',
    'e07000068',
    'e07000069',
    'e07000070',
    'e07000071',
    'e07000072',
    'e07000073',
    'e07000074',
    'e07000075',
    'e07000076',
    'e07000077',
    'e07000078',
    'e07000079',
    'e07000080',
    'e07000081',
    'e07000082',
    'e07000083',
    'e07000084',
    'e07000085',
    'e07000086',
    'e07000087',
    'e07000088',
    'e07000089',
    'e07000090',
    'e07000091',
    'e07000092',
    'e07000093',
    'e07000094',
    'e07000095',
    'e07000096',
    'e07000098',
    'e07000099',
    'e07000102',
    'e07000103',
    'e07000105',
    'e07000106',
    'e07000107',
    'e07000108',
    'e07000109',
    'e07000110',
    'e07000111',
    'e07000112',
    'e07000113',
    'e07000114',
    'e07000115',
    'e07000116',
    'e07000117',
    'e07000118',
    'e07000119',
    'e07000120',
    'e07000121',
    'e07000122',
    'e07000123',
    'e07000124',
    'e07000125',
    'e07000126',
    'e07000127',
    'e07000128',
    'e07000129',
    'e07000130',
    'e07000131',
    'e07000132',
    'e07000133',
    'e07000134',
    'e07000135',
    'e07000136',
    'e07000137',
    'e07000138',
    'e07000139',
    'e07000140',
    'e07000141',
    'e07000142',
    'e07000143',
    'e07000144',
    'e07000145',
    'e07000146',
    'e07000147',
    'e07000148',
    'e07000149',
    'e07000163',
    'e07000164',
    'e07000165',
    'e07000166',
    'e07000167',
    'e07000168',
    'e07000169',
    'e07000170',
    'e07000171',
    'e07000172',
    'e07000173',
    'e07000174',
    'e07000175',
    'e07000176',
    'e07000177',
    'e07000178',
    'e07000179',
    'e07000180',
    'e07000181',
    'e07000187',
    'e07000188',
    'e07000189',
    'e07000192',
    'e07000193',
    'e07000194',
    'e07000195',
    'e07000196',
    'e07000197',
    'e07000198',
    'e07000199',
    'e07000200',
    'e07000202',
    'e07000203',
    'e07000207',
    'e07000208',
    'e07000209',
    'e07000210',
    'e07000211',
    'e07000212',
    'e07000213',
    'e07000214',
    'e07000215',
    'e07000216',
    'e07000217',
    'e07000218',
    'e07000219',
    'e07000220',
    'e07000221',
    'e07000222',
    'e07000223',
    'e07000224',
    'e07000225',
    'e07000226',
    'e07000227',
    'e07000228',
    'e07000229',
    'e07000234',
    'e07000235',
    'e07000236',
    'e07000237',
    'e07000238',
    'e07000239',
    'e07000240',
    'e07000241',
    'e07000242',
    'e07000243',
    'e07000244',
    'e07000245',
    'e07000246',
    'e08000001',
    'e08000002',
    'e08000003',
    'e08000004',
    'e08000005',
    'e08000006',
    'e08000007',
    'e08000008',
    'e08000009',
    'e08000010',
    'e08000011',
    'e08000012',
    'e08000013',
    'e08000014',
    'e08000015',
    'e08000016',
    'e08000017',
    'e08000018',
    'e08000019',
    'e08000021',
    'e08000022',
    'e08000023',
    'e08000024',
    'e08000025',
    'e08000026',
    'e08000027',
    'e08000028',
    'e08000029',
    'e08000030',
    'e08000031',
    'e08000032',
    'e08000033',
    'e08000034',
    'e08000035',
    'e08000036',
    'e08000037',
    'e09000002',
    'e09000003',
    'e09000004',
    'e09000005',
    'e09000006',
    'e09000007',
    'e09000008',
    'e09000009',
    'e09000010',
    'e09000011',
    'e09000012',
    'e09000013',
    'e09000014',
    'e09000015',
    'e09000016',
    'e09000017',
    'e09000018',
    'e09000019',
    'e09000020',
    'e09000021',
    'e09000022',
    'e09000023',
    'e09000024',
    'e09000025',
    'e09000026',
    'e09000027',
    'e09000028',
    'e09000029',
    'e09000030',
    'e09000031',
    'e09000032',
    'e09000033',
    's12000005',
    's12000006',
    's12000008',
    's12000010',
    's12000011',
    's12000013',
    's12000014',
    's12000017',
    's12000018',
    's12000019',
    's12000020',
    's12000021',
    's12000023',
    's12000026',
    's12000027',
    's12000028',
    's12000029',
    's12000030',
    's12000033',
    's12000034',
    's12000035',
    's12000036',
    's12000038',
    's12000039',
    's12000040',
    's12000041',
    's12000042',
    's12000045',
    's12000047',
    's12000048',
    's12000049',
    's12000050'
    ];
const COUNCILS = SCOTLAND_COUNCILS.concat(ENGLAND_COUNCILS);
const REGIONS = [
    'ayrshire_and_arran',
    'borders',
    'dumfries_and_galloway',
    'fife',
    'forth_valley',
    'grampian',
    'greater_glasgow_and_clyde',
    'highland',
    'lanarkshire',
    'lothian',
    'orkney',
    'shetland',
    'tayside',
    'western_isles',
];
const COUNTRIES = ['uk', 'england', 'scotland', 'wales'];
const LOCATIONS = COUNCILS.concat(REGIONS).concat(COUNTRIES).concat(LTLA_NAMES);
const TOPICS = [
    'vaccination',
    'all_deaths',
    'covid_deaths',
    'tests_carried_out',
    'people_tested',
    'hospital_confirmed',
    'icu_confirmed',
    'tests_reported',
    'new_cases',
    'hospital_admission',
    'cumulative_cases',
    'case_trends',
    'icu',
    'hospital',
    'cases',
    'sobol',
    'vaccine_first',
    'vaccine_second',
    'vaccine_third',
];
const TIMES = ['daily', 'weekly', 'model', 'correlation'];
const GROUPS = [
    'place_of_death',
    'all_sexes_agegroups',
    'all_boards',
    'all_local_authorities',
    'age_group',
    'location_type',
];
const TYPES = ['cumulative'];
const MODELS = ['eera'];

import nameMappings from './name_mapping.json';
const NAME_MAPPINGS: { [key: string]: any } = nameMappings;

function findKeyword(keywords: string[], checkList: string[]): string | null {
    // Return the keyword in the check list.
    for (const c of checkList) {
        if (keywords.includes(c)) {
            return c;
        }
    }
    return null;
}

function upLevel(loc: string): string {
    if (SCOTLAND_COUNCILS.includes(loc)) return 'scotland';
    if (ENGLAND_COUNCILS.includes(loc)) return 'england';
    if (REGIONS.includes(loc)) return 'scotland';
    return '';
}

function maxLoc(locs: string[]): string | null {
    locs = Array.from(new Set(locs));
    for (const loc of locs) {
        if (COUNTRIES.includes(loc)) {
            return locs.length === 1 ? loc : 'Global';
        }
    }
    for (const loc of locs) {
        if (REGIONS.includes(loc)) {
            return locs.length === 1 ? loc : upLevel(loc);
        }
    }
    for (const loc of locs) {
        if (COUNCILS.includes(loc)) {
            return locs.length === 1 ? loc : upLevel(loc);
        }
    }
    return null;
}

function sameKeyword(keywords: (string | null)[]): string | null {
    if (new Set(keywords).size === 1) {
        return keywords[0];
    }
    return null;
}

function generateTitle(keywordsList: string[][]): string {
    const locs = [];
    const times = [];
    const topics = [];
    const groups = [];
    const types = [];
    const models = [];
    for (const keywords of keywordsList) {
        let loc = findKeyword(keywords, LOCATIONS);
        if (loc === null) {
            return '[keywords error] location missing';
        }
        locs.push(loc);

        let time = findKeyword(keywords, TIMES);
        if (time === null) {
            return '[keywords error] should have daily, weekly, model, correlation';
        }
        times.push(time);

        let topic = findKeyword(keywords, TOPICS);
        if (topic === null) {
            return '[keywords error] topic missing';
        }
        topics.push(topic);

        const group = findKeyword(keywords, GROUPS);
        groups.push(group);

        const type = findKeyword(keywords, TYPES);
        types.push(type);

        const model = findKeyword(keywords, MODELS);
        models.push(model);
    }

    // Single stream
    if (keywordsList.length === 1) {
        return combineToTitle(locs[0], times[0], topics[0], groups[0], types[0], models[0]);
    }

    // Multiple streams
    return combineToTitle(
        maxLoc(locs),
        sameKeyword(times),
        sameKeyword(topics),
        sameKeyword(groups),
        sameKeyword(types),
        sameKeyword(models)
    );
}

function combineToTitle(
    loc: string | null,
    time: string | null,
    topic: string | null,
    group: string | null,
    type: string | null,
    model: string | null
) {
    if (topic === null) {
        return getNameMapping(loc);
    }
    let result = '';
    if (model === null) {
        if (time === null) {
            result = `${getNameMapping(loc)} - ${getNameMapping(topic)}`;
        }
        if (loc && time && topic) {
            result = `${getNameMapping(loc)} - ${getNameMapping(time)} ${getNameMapping(topic)}`;
        }
    } else {
        result = `${getNameMapping(loc)} - ${getNameMapping(time)} ${getNameMapping(model)} ${getNameMapping(topic)}`;
    }

    if (group !== null) {
        result += ` by ${getNameMapping(group)}`;
    }
    if (type !== null) {
        result += ' (cumulative)';
    }
    return result;
}

function getNameMapping(key: string | null): string {
    if (key === null) return '';

    if (key in NAME_MAPPINGS) {
        return NAME_MAPPINGS[key];
    }
    return key.replace('_', ' ');
}

export default generateTitle;
